name: Docker Build and Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'install-dev-tools.sh'
      - 'setup-shell.sh'
      - 'setup-ssh-keys.sh'
      - 'start.sh'
      - '.dockerignore'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: devenv:test
          platforms: linux/amd64
          cache-from: |
            type=gha
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            type=gha,mode=max
            type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILDKIT_CACHE_MOUNT_NS=spielen-devcontainer

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Test Docker image
        run: |
          # Test that the container starts and stays running in detached mode
          CONTAINER_ID=$(docker run -d devenv:test)
          sleep 5
          if docker ps | grep -q $CONTAINER_ID; then
            echo "✅ Container is running successfully in detached mode"
            docker stop $CONTAINER_ID
          else
            echo "❌ Container failed to stay running in detached mode"
            docker logs $CONTAINER_ID
            exit 0
          fi
          
          # Test that the image runs successfully in interactive mode
          docker run --rm devenv:test /bin/bash -c "echo 'Container started successfully'"
          
          # Test that essential tools are installed
          echo "Testing essential tools..."
          docker run --rm devenv:test /bin/bash -c "which git && which curl && which vim"
          
          # Test that Python is available
          echo "Testing Python..."
          docker run --rm devenv:test /bin/bash -c "python3 --version"
          
          # Test that Node.js is available
          echo "Testing Node.js..."
          docker run --rm devenv:test /bin/bash -c "node --version"
          
          # Test that development tools are available
          echo "Testing development tools..."
          docker run --rm devenv:test /bin/bash -c "source ~/.local/venv/bin/activate && python -c 'import black, flake8, pytest' && echo 'Python tools OK'"
          docker run --rm devenv:test /bin/bash -c "which typescript && which eslint && echo 'Node.js tools OK'"
          
          # Test that the developer user exists and has sudo access
          echo "Testing user permissions..."
          docker run --rm devenv:test /bin/bash -c "whoami && sudo whoami"
          
          # Test workspace directory
          echo "Testing workspace directory..."
          docker run --rm devenv:test /bin/bash -c "ls -la /home/developer/workspace"

      - name: Test Docker Compose
        run: |
          # Test that docker-compose builds successfully
          docker-compose build
          
          # Test that the service can start
          docker-compose up -d
          sleep 10
          
          # Test that the container is running
          docker-compose ps
          
          # Test that we can exec into the container
          docker-compose exec -T devenv /bin/bash -c "echo 'Docker Compose test successful'"
          
          # Clean up
          docker-compose down

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'devenv:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
