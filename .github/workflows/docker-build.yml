name: Docker Build and Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'install-dev-tools.sh'
      - 'setup-shell.sh'
      - 'setup-ssh-keys.sh'
      - 'start.sh'
      - '.dockerignore'
      - 'package.json'
  release:
    types: [published]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Build Docker image with optimized cache
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: devenv:test
          platforms: linux/amd64
          cache-from: |
            type=gha,scope=buildkit
          cache-to: |
            type=gha,mode=max,scope=buildkit
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILDKIT_CACHE_MOUNT_NS=spielen-devcontainer

      - name: Test Docker image
        run: |
          # Test that the container starts and stays running in detached mode
          CONTAINER_ID=$(docker run -d devenv:test)
          sleep 5
          if docker ps | grep -q $CONTAINER_ID; then
            echo "✅ Container is running successfully in detached mode"
            docker stop $CONTAINER_ID
          else
            echo "❌ Container failed to stay running in detached mode"
            docker logs $CONTAINER_ID
            exit 0
          fi
          
          # Test that the image runs successfully in interactive mode
          docker run --rm devenv:test /bin/bash -c "echo 'Container started successfully'"
          
          # Test that essential tools are installed
          echo "Testing essential tools..."
          docker run --rm devenv:test /bin/bash -c "which git && which curl && which vim"
          
          # Test that Python is available
          echo "Testing Python..."
          docker run --rm devenv:test /bin/bash -c "python3 --version"
          
          # Test that Node.js is available
          echo "Testing Node.js..."
          docker run --rm devenv:test /bin/bash -c "node --version"
          
          # Test that development tools are available
          echo "Testing development tools..."
          docker run --rm devenv:test /bin/bash -c "source ~/.local/venv/bin/activate && python -c 'import black, flake8, pytest' && echo 'Python tools OK'"
          docker run --rm devenv:test /bin/bash -c "which typescript && which eslint && echo 'Node.js tools OK'"
          
          # Test that the developer user exists and has sudo access
          echo "Testing user permissions..."
          docker run --rm devenv:test /bin/bash -c "whoami && sudo whoami"
          
          # Test workspace directory
          echo "Testing workspace directory..."
          docker run --rm devenv:test /bin/bash -c "ls -la /home/developer/workspace"

      - name: Test Docker Compose
        run: |
          # Test that docker-compose builds successfully
          docker-compose build
          
          # Test that the service can start
          docker-compose up -d
          sleep 10
          
          # Test that the container is running
          docker-compose ps
          
          # Test that we can exec into the container
          docker-compose exec -T devenv /bin/bash -c "echo 'Docker Compose test successful'"
          
          # Clean up
          docker-compose down

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'devenv:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

  auto-merge:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]' || github.actor == 'github-actions[bot]' || contains(github.event.pull_request.labels.*.name, 'auto-merge')
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for merge conflicts
        id: conflict-check
        run: |
          # Fetch the latest changes
          git fetch origin ${{ github.event.pull_request.base.ref }}
          
          # Check if there are any merge conflicts
          if git merge-tree $(git merge-base HEAD origin/${{ github.event.pull_request.base.ref }}) HEAD origin/${{ github.event.pull_request.base.ref }} | grep -q "<<<<<<< "; then
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            echo "❌ Merge conflicts detected"
          else
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
            echo "✅ No merge conflicts detected"
          fi

      - name: Auto-merge pull request
        if: steps.conflict-check.outputs.has_conflicts == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --squash \
            --delete-branch \
            --subject "${{ github.event.pull_request.title }}" \
            --body "${{ github.event.pull_request.body }}"

      - name: Comment on conflicted PR
        if: steps.conflict-check.outputs.has_conflicts == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Auto-merge failed**: This pull request has merge conflicts that need to be resolved manually before it can be merged.'
            })

  release-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.package-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.package-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.package-version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: |
            type=gha,scope=buildkit
          cache-to: |
            type=gha,mode=max,scope=buildkit
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILDKIT_CACHE_MOUNT_NS=spielen-devcontainer
            VERSION=${{ steps.package-version.outputs.version }}

      - name: Update Docker image labels with version
        run: |
          echo "Built and pushed Docker images with version ${{ steps.package-version.outputs.version }}"
          echo "Available tags:"
          echo "${{ steps.meta.outputs.tags }}"
